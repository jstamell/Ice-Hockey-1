summary(l_speed)
summary(l_speed)
l_speed2 <- lm(formula = dist~speed2, data=cars)
summary(l_speed2)
summary(l_speed2)
AICc(l_all)
AICc(l_speed)
AICc(l_all)
AICc(l_speed)
AICc(l_speed2)
l_all <- lm(formula = dist~speed + speed2-1, data=cars)
summary(l_all)
l_speed <- lm(formula = dist~speed, data=cars)
summary(l_speed)
l_speed2 <- lm(formula = dist~speed2, data=cars)
summary(l_speed2)
AICc(l_all)
AICc(l_speed)
AICc(l_speed2)
fit <- step(glm(mort~.-hc-nox-so,data=pollution))
l_all <- lm(formula = mort ~ prec + jant + jult + popn + educ + dens + nonw, data=pollution)
summary(l_all)
l_all <- lm(formula = mort ~ prec + jant + jult + educ + nonw, data=pollution)
summary(l_all)
l1 <- lm(formula = mort ~ prec + jant + jult + popn + educ + dens + nonw, data=pollution)
summary(l1)
l2 <- lm(formula = mort ~ prec + jant + jult + popn + educ + nonw, data=pollution)
summary(l2)
l3 <- lm(formula = mort ~ prec + jant + jult + educ + nonw, data=pollution)
summary(l3)
l4 <- lm(formula = mort ~ + jant + jult + educ + nonw, data=pollution)
summary(l4)
l4 <- lm(formula = mort ~ + jant + educ + nonw, data=pollution)
summary(l4)
fit <- step(glm(mort ~ jant + educ + nonw,data=pollution))
boxcox(fit)
plot.glm.diag(fit)
rfit <- lm.ridge(mort~.-hc-nox,data=pollution,lambda=seq(0,20,0.01))
plot(rfit)
select(rfit)
fit <- step(glm(mort~.-nox-so-dens,data=pollution))
boxcox(fit)
plot.glm.diag(fit)
l1 <- lm(formula = mort ~ prec + jant + jult + popn + educ + dens + nonw, data=pollution)
summary(l1)
l2 <- lm(formula = mort ~ prec + jant + jult + popn + educ + nonw, data=pollution)
summary(l2)
l3 <- lm(formula = mort ~ prec + jant + jult + educ + nonw, data=pollution)
summary(l3)
l4 <- lm(formula = mort ~ jant + educ + nonw, data=pollution)
summary(l4)
fit <- step(glm(mort ~ jant + educ + nonw,data=pollution))
boxcox(fit)
plot.glm.diag(fit)
l1 <- lm(formula = mort ~ prec + jant + jult + popn + educ + dens + nonw, data=pollution)
summary(l1)
l2 <- lm(formula = mort ~ prec + jant + jult + popn + educ + nonw, data=pollution)
summary(l2)
l3 <- lm(formula = mort ~ prec + jant + jult + educ + nonw, data=pollution)
summary(l3)
l4 <- lm(formula = mort ~ jant + jult + educ + nonw, data=pollution)
summary(l4)
library(lqs)
install.packages('lqs')
library(lqs)
rlm(mort~.-nox-so-dens,data=pollution)
l_no_intercept$coefficients
l_all <- lm(formula = dist~speed + speed2-1, data=cars)
summary(l_all)
l_no_intercept <- lm(formula = dist~speed + speed2-1, data=cars)
summary(l_no_intercept)
l_speed <- lm(formula = dist~speed, data=cars)
summary(l_speed)
l_speed2 <- lm(formula = dist~speed2, data=cars)
summary(l_speed2)
AIC(l_all)
AIC(l_no_intercept)
AIC(l_speed)
AIC(l_speed2)
l_no_intercept$coefficients
reac_t <- l_no_intercept$coefficients[0]* 5280/3600
reac_t
reac_t <- l_no_intercept$coefficients[0]* 5280/3600
reac_t
l_no_intercept[0]
l_no_intercept$coefficients[0]
l_no_intercept$coefficients[1]
reac_t <- l_no_intercept$coefficients[1]* 5280/3600
reac_t
cars
X <- model.matrix(dist ~ speed + I(speed^2), cars)
Y <- matrix(cars$dist)
betaQR <- function(X,Y) {
qrx <- qr(X)
Q <- qr.Q(qrx, complete = TRUE)
R <- qr.R(qrx)
QtY <- t(Q) %*% Y
p <- dim(R)[1]
beta <- solve(R) %*% matrix(QtY[1:p])
res_var <- norm(QtY[(p+1):dim(QtY)[1]], "2")^2 /(dim(Y)[1]-dim(beta)[1])
cov_beta <- chol2inv(R)*res_var
rownames(cov_beta) <- row.names(beta)
colnames(cov_beta) <- row.names(beta)
return(list("beta" = beta, "res_var" = res_var, "estimate_cov" = cov_beta))
}
para_est <- betaQR(X,Y)
vcov(l_all)
beta_hat <- para_est$beta
beta0 <- 0
beta_se <- sqrt(diag(para_est$estimate_cov))
deg <- l_all$df.residual
ts <- (beta_hat - beta0)/ beta_se
2*pt(abs(ts), deg, lower=FALSE)
rfit <- lm.ridge(mort~.-hc-nox,data=pollution,lambda=seq(0,20,0.01))
plot(rfit)
select(rfit)
fit <- step(glm(mort~.-hc,data=pollution))
boxcox(fit)
plot.glm.diag(fit)
fit <- step(glm(mort~.-nox,data=pollution))
boxcox(fit)
plot.glm.diag(fit)
rfit <- lm.ridge(mort~.-hc-nox,data=pollution,lambda=seq(0,20,0.01))
plot(rfit)
select(rfit)
fit <- step(glm(mort~.-hc-dens,data=pollution))
boxcox(fit)
plot.glm.diag(fit)
fit <- step(glm(mort~.-nox-dens,data=pollution))
boxcox(fit)
plot.glm.diag(fit)
rlm(mort~.-nox-so-dens,data=pollution)
fit <- step(glm(mort~.-dens,data=pollution))
boxcox(fit)
plot.glm.diag(fit)
fit <- step(glm(mort~.-hc-nox-so,data=pollution))
boxcox(fit)
plot.glm.diag(fit) # model adequate?
print(AIC(fit))
fit <- step(glm(mort~.-hc-nox-so-jant-jult,data=pollution))
boxcox(fit)
plot.glm.diag(fit) # model adequate?
print(AIC(fit))
fit <- step(glm(mort~.-hc-nox-so-jult-prec,data=pollution))
boxcox(fit)
plot.glm.diag(fit) # model adequate?
print(AIC(fit))
fit <- step(glm(mort~.-hc-nox-so-jant-prec,data=pollution))
boxcox(fit)
plot.glm.diag(fit) # model adequate?
print(AIC(fit))
fit <- update(fit,log(mort)~.) # try log transform of response
plot.glm.diag(fit) # model adequate?
print(AIC(fit))
fit <- step(glm(mort~popn + jant + educ + nonw,data=pollution))
boxcox(fit)
plot.glm.diag(fit)
pollution
pollution[-37]
pollution[!37]
pollution[37]
pollution[37,]
pollution[-37,]
fit <- step(glm(mort~popn + jant + educ + nonw,data=pollution[-37,]))
plot.glm.diag(fit)
pairs(pollution[,c(12:14,16)]) # and pollution measures
fit <- step(glm(mort~popn + jant + educ + nonw +so + hc,data=pollution[-37,]))
boxcox(fit)
plot.glm.diag(fit)
fit <- step(glm(mort~popn + jant + educ + nonw + so + nox,data=pollution[-37,]))
boxcox(fit)
plot.glm.diag(fit)
fit <- step(glm(mort~popn + jant + educ + nonw +so + hc,data=pollution[-37,]))
boxcox(fit)
plot.glm.diag(fit)
print(AIC(fit))
fit <- step(glm(mort~popn + jant + educ + nonw + so + nox,data=pollution[-37,]))
boxcox(fit)
plot.glm.diag(fit)
print(AIC(fit))
rlm(mort~.-nox-so-dens,data=pollution)
rfit <- lm.ridge(mort~.-hc-nox,data=pollution,lambda=seq(0,20,0.01))
plot(rfit)
select(rfit)
rlm(mort~.-nox-so-dens,data=pollution)
fit <- step(glm(mort~popn + jant + educ + nonw +so + hc,data=pollution[-37,]))
boxcox(fit)
plot.glm.diag(fit)
print(AIC(fit))
fit <- step(glm(mort~popn + jant + educ + nonw + so + nox,data=pollution[-37,]))
boxcox(fit)
plot.glm.diag(fit)
print(AIC(fit))
shiny::runApp('GitHub/Ice-Hockey')
runApp('GitHub/Ice-Hockey')
runApp('R Shiny Practice')
df <- structure(list(game_date = structure(c(17689, 17689, 17689, 17689,
17689), class = "Date"), event_team = c("WSH", "WSH", "WSH",
"VGK", "VGK"),
event_description = c("WSH ONGOAL - #8 OVECHKIN, Deflected, Off. Zone, 10 ft. Expected Goal Prob: 25.7%",
"WSH ONGOAL - #8 OVECHKIN, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 4.9%",
"WSH ONGOAL - #29 DJOOS, Wrist, Off. Zone, 65 ft. Expected Goal Prob: 1%",
"VGK ONGOAL - #5 ENGELLAND, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 1.5%",
"VGK ONGOAL - #88 SCHMIDT, Wrist, Off. Zone, 62 ft. Expected Goal Prob: 1.3%"
), event_type = c(0, 0, 0, 0, 0), home_team = c("VGK", "VGK", "VGK", "VGK", "VGK"), away_team = c("WSH", "WSH", "WSH", "WSH",
"WSH"), coords_x = c(-80, -53, -31, 56, 34), coords_y = c(1,
-14, 30, -17, -26)), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA, -5L))
library(plotly)
df <- structure(list(game_date = structure(c(17689, 17689, 17689, 17689,
17689), class = "Date"), event_team = c("WSH", "WSH", "WSH",
"VGK", "VGK"),
event_description = c("WSH ONGOAL - #8 OVECHKIN, Deflected, Off. Zone, 10 ft. Expected Goal Prob: 25.7%",
"WSH ONGOAL - #8 OVECHKIN, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 4.9%",
"WSH ONGOAL - #29 DJOOS, Wrist, Off. Zone, 65 ft. Expected Goal Prob: 1%",
"VGK ONGOAL - #5 ENGELLAND, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 1.5%",
"VGK ONGOAL - #88 SCHMIDT, Wrist, Off. Zone, 62 ft. Expected Goal Prob: 1.3%"
), event_type = c(0, 0, 0, 0, 0), home_team = c("VGK", "VGK", "VGK", "VGK", "VGK"), away_team = c("WSH", "WSH", "WSH", "WSH",
"WSH"), coords_x = c(-80, -53, -31, 56, 34), coords_y = c(1,
-14, 30, -17, -26)), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA, -5L))
image_file <- "full-rink.png"
txt <- RCurl::base64Encode(readBin(image_file, "raw", file.info(image_file)[1, "size"]), "txt")
df %>%
plot_ly(x = ~coords_x, y=~coords_y,
text= ~event_description)  %>%
add_markers(size = ~event_type,
sizes = c(150, 700),
alpha = 0.75,
color = ~factor(event_team),
colors = c("black", "slategrey")
) %>%
layout(
xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE),
images= list(
source= paste('data:image/png;base64', txt, sep=','),
xref= "x",
yref= "y",
x = 0,
y = 0,
sizex = 200,
sizey = 150,
opacity = 0.8,
layer = "below",
xanchor = "center",
yanchor = "middle"
)
)
library(plotly)
df <- structure(list(game_date = structure(c(17689, 17689, 17689, 17689,
17689), class = "Date"), event_team = c("WSH", "WSH", "WSH",
"VGK", "VGK"),
event_description = c("WSH ONGOAL - #8 OVECHKIN, Deflected, Off. Zone, 10 ft. Expected Goal Prob: 25.7%",
"WSH ONGOAL - #8 OVECHKIN, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 4.9%",
"WSH ONGOAL - #29 DJOOS, Wrist, Off. Zone, 65 ft. Expected Goal Prob: 1%",
"VGK ONGOAL - #5 ENGELLAND, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 1.5%",
"VGK ONGOAL - #88 SCHMIDT, Wrist, Off. Zone, 62 ft. Expected Goal Prob: 1.3%"
), event_type = c(0, 0, 0, 0, 0), home_team = c("VGK", "VGK", "VGK", "VGK", "VGK"), away_team = c("WSH", "WSH", "WSH", "WSH",
"WSH"), coords_x = c(-80, -53, -31, 56, 34), coords_y = c(1,
-14, 30, -17, -26)), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA, -5L))
image_file <- "full-rink.png"
txt <- RCurl::base64Encode(readBin(image_file, "raw", file.info(image_file)[1, "size"]), "txt")
df %>%
plot_ly(x = ~coords_x, y=~coords_y,
text= ~event_description)  %>%
add_markers(size = ~event_type,
sizes = c(150, 700),
alpha = 0.75,
color = ~factor(event_team),
colors = c("black", "slategrey")
) %>%
layout(
xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE),
images= list(
source= paste('data:image/png;base64', txt, sep=','),
xref= "x",
yref= "y",
x = 0,
y = 0,
sizex = 200,
sizey = 150,
opacity = 0.8,
layer = "below",
xanchor = "center",
yanchor = "middle"
)
)
library(plotly)
df <- structure(list(game_date = structure(c(17689, 17689, 17689, 17689,
17689), class = "Date"), event_team = c("WSH", "WSH", "WSH",
"VGK", "VGK"),
event_description = c("WSH ONGOAL - #8 OVECHKIN, Deflected, Off. Zone, 10 ft. Expected Goal Prob: 25.7%",
"WSH ONGOAL - #8 OVECHKIN, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 4.9%",
"WSH ONGOAL - #29 DJOOS, Wrist, Off. Zone, 65 ft. Expected Goal Prob: 1%",
"VGK ONGOAL - #5 ENGELLAND, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 1.5%",
"VGK ONGOAL - #88 SCHMIDT, Wrist, Off. Zone, 62 ft. Expected Goal Prob: 1.3%"
), event_type = c(0, 0, 0, 0, 0), home_team = c("VGK", "VGK", "VGK", "VGK", "VGK"), away_team = c("WSH", "WSH", "WSH", "WSH",
"WSH"), coords_x = c(-80, -53, -31, 56, 34), coords_y = c(1,
-14, 30, -17, -26)), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA, -5L))
image_file <- "full-rink.png"
txt <- RCurl::base64Encode(readBin(image_file, "raw", file.info(image_file)[1, "size"]), "txt")
df %>%
plot_ly(x = ~coords_x, y=~coords_y,
text= ~event_description)  %>%
add_markers(size = ~event_type,
sizes = c(150, 700),
alpha = 0.75,
color = ~factor(event_team),
colors = c("black", "slategrey")
) %>%
layout(
xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE),
images= list(
source= paste('data:image/png;base64', txt, sep=','),
xref= "x",
yref= "y",
x = 0,
y = 0,
sizex = 200,
sizey = 150,
opacity = 0.8,
layer = "below",
xanchor = "center",
yanchor = "middle"
)
)
library(plotly)
df <- structure(list(game_date = structure(c(17689, 17689, 17689, 17689,
17689), class = "Date"), event_team = c("WSH", "WSH", "WSH",
"VGK", "VGK"),
event_description = c("WSH ONGOAL - #8 OVECHKIN, Deflected, Off. Zone, 10 ft. Expected Goal Prob: 25.7%",
"WSH ONGOAL - #8 OVECHKIN, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 4.9%",
"WSH ONGOAL - #29 DJOOS, Wrist, Off. Zone, 65 ft. Expected Goal Prob: 1%",
"VGK ONGOAL - #5 ENGELLAND, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 1.5%",
"VGK ONGOAL - #88 SCHMIDT, Wrist, Off. Zone, 62 ft. Expected Goal Prob: 1.3%"
), event_type = c(0, 0, 0, 0, 0), home_team = c("VGK", "VGK", "VGK", "VGK", "VGK"), away_team = c("WSH", "WSH", "WSH", "WSH",
"WSH"), coords_x = c(-80, -53, -31, 56, 34), coords_y = c(1,
-14, 30, -17, -26)), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA, -5L))
image_file <- "full-rink.png"
txt <- RCurl::base64Encode(readBin(image_file, "raw", file.info(image_file)[1, "size"]), "txt")
df %>%
plot_ly(x = ~coords_x, y=~coords_y,
text= ~event_description)  %>%
add_markers(size = ~event_type,
sizes = c(150, 700),
alpha = 0.75,
color = ~factor(event_team),
colors = c("black", "slategrey")
) %>%
layout(
xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE),
images= list(
source= paste('data:image/png;base64', txt, sep=','),
xref= "x",
yref= "y",
x = 0,
y = 0,
sizex = 200,
sizey = 150,
opacity = 0.8,
layer = "below",
xanchor = "center",
yanchor = "middle"
)
)
library(plotly)
df <- structure(list(game_date = structure(c(17689, 17689, 17689, 17689,
17689), class = "Date"), event_team = c("WSH", "WSH", "WSH",
"VGK", "VGK"),
event_description = c("WSH ONGOAL - #8 OVECHKIN, Deflected, Off. Zone, 10 ft. Expected Goal Prob: 25.7%",
"WSH ONGOAL - #8 OVECHKIN, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 4.9%",
"WSH ONGOAL - #29 DJOOS, Wrist, Off. Zone, 65 ft. Expected Goal Prob: 1%",
"VGK ONGOAL - #5 ENGELLAND, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 1.5%",
"VGK ONGOAL - #88 SCHMIDT, Wrist, Off. Zone, 62 ft. Expected Goal Prob: 1.3%"
), event_type = c(0, 0, 0, 0, 0), home_team = c("VGK", "VGK", "VGK", "VGK", "VGK"), away_team = c("WSH", "WSH", "WSH", "WSH",
"WSH"), coords_x = c(-80, -53, -31, 56, 34), coords_y = c(1,
-14, 30, -17, -26)), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA, -5L))
image_file <- "full-rink.png"
txt <- RCurl::base64Encode(readBin(image_file, "raw", file.info(image_file)[1, "size"]), "txt")
df %>%
plot_ly(x = ~coords_x, y=~coords_y,
text= ~event_description)  %>%
add_markers(size = ~event_type,
sizes = c(150, 700),
alpha = 0.75,
color = ~factor(event_team),
colors = c("black", "slategrey")
) %>%
layout(
xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE),
images= list(
source= paste('data:image/png;base64', txt, sep=','),
xref= "x",
yref= "y",
x = 0,
y = 0,
sizex = 200,
sizey = 150,
opacity = 0.8,
layer = "below",
xanchor = "center",
yanchor = "middle"
)
)
library(plotly)
df <- structure(list(game_date = structure(c(17689, 17689, 17689, 17689,
17689), class = "Date"), event_team = c("WSH", "WSH", "WSH",
"VGK", "VGK"),
event_description = c("WSH ONGOAL - #8 OVECHKIN, Deflected, Off. Zone, 10 ft. Expected Goal Prob: 25.7%",
"WSH ONGOAL - #8 OVECHKIN, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 4.9%",
"WSH ONGOAL - #29 DJOOS, Wrist, Off. Zone, 65 ft. Expected Goal Prob: 1%",
"VGK ONGOAL - #5 ENGELLAND, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 1.5%",
"VGK ONGOAL - #88 SCHMIDT, Wrist, Off. Zone, 62 ft. Expected Goal Prob: 1.3%"
), event_type = c(0, 0, 0, 0, 0), home_team = c("VGK", "VGK", "VGK", "VGK", "VGK"), away_team = c("WSH", "WSH", "WSH", "WSH",
"WSH"), coords_x = c(-80, -53, -31, 56, 34), coords_y = c(1,
-14, 30, -17, -26)), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA, -5L))
image_file <- "full-rink.png"
txt <- RCurl::base64Encode(readBin(image_file, "raw", file.info(image_file)[1, "size"]), "txt")
setwd("~/GitHub/Ice-Hockey")
library(plotly)
df <- structure(list(game_date = structure(c(17689, 17689, 17689, 17689,
17689), class = "Date"), event_team = c("WSH", "WSH", "WSH",
"VGK", "VGK"),
event_description = c("WSH ONGOAL - #8 OVECHKIN, Deflected, Off. Zone, 10 ft. Expected Goal Prob: 25.7%",
"WSH ONGOAL - #8 OVECHKIN, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 4.9%",
"WSH ONGOAL - #29 DJOOS, Wrist, Off. Zone, 65 ft. Expected Goal Prob: 1%",
"VGK ONGOAL - #5 ENGELLAND, Wrist, Off. Zone, 38 ft. Expected Goal Prob: 1.5%",
"VGK ONGOAL - #88 SCHMIDT, Wrist, Off. Zone, 62 ft. Expected Goal Prob: 1.3%"
), event_type = c(0, 0, 0, 0, 0), home_team = c("VGK", "VGK", "VGK", "VGK", "VGK"), away_team = c("WSH", "WSH", "WSH", "WSH",
"WSH"), coords_x = c(-80, -53, -31, 56, 34), coords_y = c(1,
-14, 30, -17, -26)), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA, -5L))
image_file <- "full-rink.png"
txt <- RCurl::base64Encode(readBin(image_file, "raw", file.info(image_file)[1, "size"]), "txt")
df %>%
plot_ly(x = ~coords_x, y=~coords_y,
text= ~event_description)  %>%
add_markers(size = ~event_type,
sizes = c(150, 700),
alpha = 0.75,
color = ~factor(event_team),
colors = c("black", "slategrey")
) %>%
layout(
xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE),
images= list(
source= paste('data:image/png;base64', txt, sep=','),
xref= "x",
yref= "y",
x = 0,
y = 0,
sizex = 200,
sizey = 150,
opacity = 0.8,
layer = "below",
xanchor = "center",
yanchor = "middle"
)
)
shiny::runApp()
source("chooser.R")
runApp()
runApp()
runApp()
shiny::runGitHub("shiny-js-examples", "jcheng5", subdir="input")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
